[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To Synthetic Musings",
    "section": "",
    "text": "This is the first blog entry by me Ravi (@project-delphi). Welcome!"
  },
  {
    "objectID": "posts/developing-pytorch-geometric-on-m1/index.html",
    "href": "posts/developing-pytorch-geometric-on-m1/index.html",
    "title": "Developing Pytorch Geometric on M1 Apple Silicon",
    "section": "",
    "text": "TLDR: From my investigations, it seems that apple silicon (and with higher probability M1) is not supported for development of pyg. Current blocker is dependence of PyTorch dependency that make use of oneMKL, Intelâ€™s Math Kernel Library. By contrast Apple uses mps Metal Performance Shaders natively, which is not fully implemented in all PyTorch modules."
  },
  {
    "objectID": "posts/developing-pytorch-geometric-on-m1/index.html#user-installation",
    "href": "posts/developing-pytorch-geometric-on-m1/index.html#user-installation",
    "title": "Developing Pytorch Geometric on M1 Apple Silicon",
    "section": "User Installation",
    "text": "User Installation\nInstalling the package as a user (as a wheels distribution) on most cpu/gpu appliances is straightforward. Hereâ€™s one way:\n\nCreate a clean python virtual environment\nActivate the virtual environment\nInstall a recent version of PyTorch\nInstall PyTorch Geometric\nCheck that the installation worked\n\n\n%%bash\n\n# set variables here\nDIR=\"$HOME/Code/throwaway/pytorch-geometric-user-install\"\nRECENT_TORCH_VERSION=2.2.0\n\nmkdir -p \"$DIR\"\ncd \"$DIR\"\npython3 -m venv .venv\nsource .venv/bin/activate\npython --version\npip install -q --upgrade pip\n\n##### TORCH BUILD AND INSTALL ON M1, to use GPUs #####\npip install -q numpy # to remove user warning with torch install\npip install -q mpmath==1.3.0 # bugfix\nxcode-select --install  &gt; /dev/null 2&gt;&1 # if xcode not installed\n\n# install miniconda for apple silicon, if not already installed\n\nif [ -d \"$HOME/anaconda3\" ] || [ -d \"$HOME/miniconda3\" ]\nthen\n    echo \"Conda is installed\"\nelse\n    curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh\n    sh Miniconda3-latest-MacOSX-arm64.sh -b -u\nfi\n###### install torch ######\npip install -q --pre torch==$RECENT_TORCH_VERSION torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu\n\n# install torch geometric\npip install -q torch-geometric\n\n# check\npython --version\npython -c \"import torch; print(f'torch version: {torch.__version__}')\"\npython -c \"import torch_geometric as pyg; print(f'torch geometric version: {pyg.__version__}')\"\n\nPython 3.9.6\nConda is installed\nPython 3.9.6\ntorch version: 2.2.0\ntorch geometric version: 2.5.0\n\n\nWhich is great for using pyg.\nThe problem is that I want to develop (and not just use) locally - that is to have an editable local install on my 2021 16 inch Macbook Pro M1 Pro. Sadly the M1 architecture is not supported by pyg-team ðŸ˜”"
  },
  {
    "objectID": "posts/developing-pytorch-geometric-on-m1/index.html#developer-installation",
    "href": "posts/developing-pytorch-geometric-on-m1/index.html#developer-installation",
    "title": "Developing Pytorch Geometric on M1 Apple Silicon",
    "section": "Developer Installation",
    "text": "Developer Installation\n\nNon M1 Machines\nFrom the project contributing guidelines, the instructions are clear.\n\nInstall a recent version of PyTorch\nOptionally install some dependencies if changes make use of them\nBe sure to uninstall the pytorch_geometric package\nClone the repo\nRun an editable install command for the repo\nRun pytest to check that everything works\n\nThe following should work:\n\n%%bash\n\nDIR=\"$HOME/Code/throwaway/pytorch-geometric-user-install\"\nRECENT_TORCH_VERSION=2.2.0\nYOUR_USERNAME=\"project-delphi\"\n\nmkdir -p \"$DIR\"\ncd \"$DIR\"\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -q --upgrade pip\n\n##### TORCH BUILD AND INSTALL ON M1, to use GPUs #####\npip install -q numpy # to remove user warning with torch install\npip install -q mpmath==1.3.0 # bugfix\nxcode-select --install  &gt; /dev/null 2&gt;&1 # if xcode not installed\n\n# install miniconda for apple silicon, if not already installed\n\nif [ -d \"$HOME/anaconda3\" ] || [ -d \"$HOME/miniconda3\" ]\nthen\n    echo \"Conda is installed\"\nelse\n    curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh\n    sh Miniconda3-latest-MacOSX-arm64.sh -b\nfi\n###### install torch ######\npip install -q --pre torch==$RECENT_TORCH_VERSION torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu\n\npip uninstall torch-geometric\npip uninstall torch-geometric\ngit clone \"https://github.com/$YOUR_USERNAME/pytorch_geometric\"\ncd pytorch_geometric\npip install -e \".[dev,full]\"\n# check\npython --version\npython -c \"import torch; print(f'torch version: {torch.__version__}')\"\npython -c \"import torch_geometric as pyg; print(f'torch geometric version: {pyg.__version__}')\"\npytest\n\nDevelop away, as long as itâ€™s a supported architecture.\n\n\nM1 Apple Silicon\nThis M1 hardware problem for developers has been noted.\nIf feature development on pytorch_geometric makes use of the listed package dependencies, M1 issues have been raised.\n\npyg-lib\npytorch scatter\npytorch sparse\npytorch cluster\n\nItâ€™s likely that the package torch-spline-conv, another package dependency, is also an issue for M1 users - however no issues mentioning this are given.\nThese dependencies are being subsumed into other packages (for example torch.scatter); at some point they wonâ€™t be needed.\n\nWhy is M1 a Problem?\nTo develop locally, I need a an editable install version of pytorch geometric. This editable install needs additional dependencies (for fuller developer functionality such as testing, type checking, compiling, linting and documentation) some of which depend on C++ extensions that are not compiled for the M1 architecture. The project founder (@rusty1s) has noted that M1 was not supported from the onset - when github didnâ€™t support M1, and there are no plans to support it now. Later Apple Silicon is supported.\n\n\nThe Solution\npyg team suggested earlier that M1 wanting the fuller editable version of the package can use the cmake & ninja build systems to create libraries and dependencies that target M1 - this will give a working modifiable install of pytorch geometric.\nLetâ€™s see if I can do this and get a development environment setup.\nWhat Iâ€™ll do is as follows:\n\ncheck the OS & Hardware\nmake sure to uninstall all versions of pytorch geometric for all locations.\ncreate and activate a clean Python virtual environment\ninstall a specific version of PyTorch using conda, as recommended by Apple\nbuild dependencies\nbuild the editable install\n\n\nOS and Hardware\n\n%%bash\necho \"Operating System: $(uname -s)\"\necho \"Hardware: $(uname -m)\"\necho \"macOS Version: $(sw_vers -productVersion)\"\necho \"Chipset: $(sysctl -n machdep.cpu.brand_string)\"\n\nOperating System: Darwin\nHardware: arm64\nmacOS Version: 14.2.1\nChipset: Apple M1 Pro\n\n\n\n\nEditable Developer Install\n\n%%bash\n# set variables here\nDIR=\"$HOME/Code/throwaway/pytorch-geometric-developer-install\"\nRECENT_TORCH_VERSION=2.2.0\nYOUR_USERNAME=\"project-delphi\"\n\nmkdir -p \"$DIR\"\ncd \"$DIR\"\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -q --upgrade pip\n\n\n##### TORCH BUILD AND INSTALL ON M1, to use GPUs #####\npip install -q numpy # to remove user warning with torch install\npip install -q mpmath==1.3.0 # bugfix\nxcode-select --install  &gt; /dev/null 2&gt;&1 # if xcode not installed\n\n# install miniconda for apple silicon, if not already installed\n\nif [ -d \"$HOME/anaconda3\" ] || [ -d \"$HOME/miniconda3\" ]\nthen\n    echo \"Conda is installed\"\nelse\n    curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh\n    sh Miniconda3-latest-MacOSX-arm64.sh -b -u\nfi\n###### install pytorch ######\npip install -q --pre torch==$RECENT_TORCH_VERSION torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu\n\n\n# install dependencies\npip install cmake\npip install ninja wheel\npip install -q git+https://github.com/pyg-team/pyg-lib.git\nMACOSX_DEPLOYMENT_TARGET=13.1 CC=clang CXX=clang++ python -m pip --no-cache-dir  install  torch-scatter\nMACOSX_DEPLOYMENT_TARGET=13.1 CC=clang CXX=clang++ python -m pip --no-cache-dir  install  torch-sparse\nMACOSX_DEPLOYMENT_TARGET=13.1 CC=clang CXX=clang++ python -m pip --no-cache-dir  install  torch-cluster\nMACOSX_DEPLOYMENT_TARGET=13.1 CC=clang CXX=clang++ python -m pip --no-cache-dir  install  torch-spline-conv\n# clone the forked repository\ngit clone \"https://github.com/pyg-team/pytorch_geometric.git\"  2&gt;/dev/null\ncd pytorch_geometric\nMACOSX_DEPLOYMENT_TARGET=13.1 CC=clang CXX=clang++ python -m pip install -q --no-cache-dir -e \".[dev,full]\"\n# check\npython --version\npython -c \"import torch; print(f'torch version: {torch.__version__}')\"\npython -c \"import torch_geometric as pyg; print(f'torch geometric version: {pyg.__version__}')\"\npytest\n\nGenerates the following output:\n...\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n================================================================================ short test summary info =================================================================================\nFAILED test/loader/test_dataloader.py::test_dataloader_on_disk_dataset[2] - TypeError: cannot pickle 'sqlite3.Connection' object\nFAILED test/test_edge_index.py::test_spspmm[directed--sum-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/test_edge_index.py::test_spspmm[directed--add-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/test_edge_index.py::test_spspmm[directed-transpose-sum-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/test_edge_index.py::test_spspmm[directed-transpose-add-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/test_edge_index.py::test_spspmm[undirected--sum-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/test_edge_index.py::test_spspmm[undirected--add-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/test_edge_index.py::test_spspmm[undirected-transpose-sum-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/test_edge_index.py::test_spspmm[undirected-transpose-add-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/test_inspector.py::test_type_repr - AttributeError: type object 'Any' has no attribute '_name'\nFAILED test/transforms/test_add_metapaths.py::test_add_metapaths - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/transforms/test_add_metapaths.py::test_add_metapaths_max_sample - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/transforms/test_add_metapaths.py::test_add_weighted_metapaths - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\nFAILED test/transforms/test_two_hop.py::test_two_hop - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...\n======================================================== 14 failed, 5416 passed, 680 skipped, 13792 warnings in 135.94s (0:02:15) ========================================================\nClose! Itâ€™s an issue with the MKL (Intelâ€™s Math Kernel Library) and Apple Silicon partial compatibility. So this problem likely persists on all Apple Silicon, and not just M1.\nApple has chosen to launch itâ€™s own framework called Metal Performance Shaders (mps) and unfortunately the BLAS support with that is only partial."
  },
  {
    "objectID": "posts/developing-pytorch-geometric-on-m1/index.html#conclusion",
    "href": "posts/developing-pytorch-geometric-on-m1/index.html#conclusion",
    "title": "Developing Pytorch Geometric on M1 Apple Silicon",
    "section": "Conclusion",
    "text": "Conclusion\nChecking with @rusty1s, this is a problem with the type of tensors used in tests. Iâ€™m going to work on replacing COO tensors with CSR tensors for testing. A conversation with chatGPT helped to explain the differences between the two types of tensors.\nAlso, MKL is part of Intelâ€™s oneAPI project. It seems that supporting apple silicon is out of scope at this time.\nSo, developing pyg on recent Apple devices may just not be possible, but running on Apple Silicon is. Well if that is true, thereâ€™s always the cloud for Apple based developers who want to contribute."
  },
  {
    "objectID": "posts/developing-pytorch-geometric-on-m1/index.html#references",
    "href": "posts/developing-pytorch-geometric-on-m1/index.html#references",
    "title": "Developing Pytorch Geometric on M1 Apple Silicon",
    "section": "References",
    "text": "References\n\npytorch on Apple Metal\npyg-lib M1 issues\npytorch-scatter M1 issue\npytorch-spars M1 issues\npytorch-cluster M1 issues"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Synthetic Musings",
    "section": "",
    "text": "Featured Writing\n\n\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nReading Time\n\n\n\n\n\n\n\n\n\nMar 3, 2024\n\n\nDeveloping Pytorch Geometric on M1 Apple Silicon\n\n\n8 min\n\n\n\n\n\n\n\nFeb 9, 2024\n\n\nPost With Code and Plot\n\n\n1 min\n\n\n\n\n\n\n\nFeb 6, 2024\n\n\nWelcome To Synthetic Musings\n\n\n1 min\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code and Plot",
    "section": "",
    "text": "Letâ€™s see if blogging with code and plots works here:\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 10, 100)\n\nfig = plt.figure()\nplt.plot(x, np.sin(x), '-')\nplt.plot(x, np.cos(x), '--')\n\n\n\n\n\n\n\n\n\n\nkindly taken from Jake Vanderplasâ€™s blog\n\nSuccess!"
  }
]
