---
title: "Developing Pytorch Geometric on M1 Apple Silicon"
author: "Ravi Kalia"
date: "2024-03-03"
categories: [graphs, code, development, environment]
image: "macbook-pro-m1.unsplash.jpg"
draft: false
format:
    html:
        code-copy: true
        code-fold: false
        toc: true
        toc-depth: 2
---

TLDR: From my investigations, it seems that apple silicon (and with higher probability M1) is not supported for development of `pyg`. Current blocker is dependence of PyTorch dependency that make use of `oneMKL`, Intel's Math Kernel Library. By contrast Apple uses `mps` Metal Performance Shaders natively, which is not fully implemented in all PyTorch modules.

# Developing Pytorch Geometric on M1 Apple Silicon

![](./macbook-pro-m1.unsplash.jpg)

Photo by <a href="https://unsplash.com/@theregisti?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">TheRegisti</a> on <a href="https://unsplash.com/photos/a-close-up-of-a-laptop-on-a-table-M_DMDRj0IuQ?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>

I've started contributing to a Python open source project. Specifically the interesting graph machine learning package [pytorch geometric](https://github.com/pyg-team/pytorch_geometric/) (or pyg). I've forked the repo, and would like to develop code contributions.

## User Installation

Installing the package as a user (as a wheels distribution) on most cpu/gpu appliances is straightforward. Here's one way:

1. Create a clean python virtual environment
1. Activate the virtual environment
1. Install a recent version of PyTorch
1. Install PyTorch Geometric
1. Check that the installation worked

```{python}

%%bash

# set variables here
DIR="$HOME/Code/throwaway/pytorch-geometric-user-install"
RECENT_TORCH_VERSION=2.2.0

mkdir -p "$DIR"
cd "$DIR"
python3 -m venv .venv
source .venv/bin/activate
python --version
pip install -q --upgrade pip

##### TORCH BUILD AND INSTALL ON M1, to use GPUs #####
pip install -q numpy # to remove user warning with torch install
pip install -q mpmath==1.3.0 # bugfix
xcode-select --install  > /dev/null 2>&1 # if xcode not installed

# install miniconda for apple silicon, if not already installed

if [ -d "$HOME/anaconda3" ] || [ -d "$HOME/miniconda3" ]
then
    echo "Conda is installed"
else
    curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh
    sh Miniconda3-latest-MacOSX-arm64.sh -b -u
fi
###### install torch ######
pip install -q --pre torch==$RECENT_TORCH_VERSION torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu

# install torch geometric
pip install -q torch-geometric

# check
python --version
python -c "import torch; print(f'torch version: {torch.__version__}')"
python -c "import torch_geometric as pyg; print(f'torch geometric version: {pyg.__version__}')"
```

Which is great for using `pyg`.

The problem is that I want to develop (and not just use) locally - that is to have an editable local install on my 2021 16 inch Macbook Pro M1 Pro. Sadly the M1 architecture is not supported by [pyg-team](https://github.com/pyg-team) ðŸ˜”

## Developer Installation

### Non M1 Machines

From the project [contributing](https://github.com/pyg-team/pytorch_geometric/blob/master/.github/CONTRIBUTING.md) guidelines, the instructions are clear.

1. Install a recent version of PyTorch
1. Optionally install some dependencies if changes make use of them
1. Be sure to uninstall the `pytorch_geometric` package
1. Clone the repo
1. Run an editable install command for the repo
1. Run `pytest` to check that everything works


The following should work:

```{python}
#| eval: false
%%bash

DIR="$HOME/Code/throwaway/pytorch-geometric-user-install"
RECENT_TORCH_VERSION=2.2.0
YOUR_USERNAME="project-delphi"

mkdir -p "$DIR"
cd "$DIR"
python3 -m venv .venv
source .venv/bin/activate
pip install -q --upgrade pip

##### TORCH BUILD AND INSTALL ON M1, to use GPUs #####
pip install -q numpy # to remove user warning with torch install
pip install -q mpmath==1.3.0 # bugfix
xcode-select --install  > /dev/null 2>&1 # if xcode not installed

# install miniconda for apple silicon, if not already installed

if [ -d "$HOME/anaconda3" ] || [ -d "$HOME/miniconda3" ]
then
    echo "Conda is installed"
else
    curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh
    sh Miniconda3-latest-MacOSX-arm64.sh -b
fi
###### install torch ######
pip install -q --pre torch==$RECENT_TORCH_VERSION torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu

pip uninstall torch-geometric
pip uninstall torch-geometric
git clone "https://github.com/$YOUR_USERNAME/pytorch_geometric"
cd pytorch_geometric
pip install -e ".[dev,full]"
# check
python --version
python -c "import torch; print(f'torch version: {torch.__version__}')"
python -c "import torch_geometric as pyg; print(f'torch geometric version: {pyg.__version__}')"
pytest
```


Develop away, as long as it's a supported architecture.


### M1 Apple Silicon

This M1 hardware problem for developers has been [noted](https://github.com/search?q=repo%3Apyg-team%2Fpytorch_geometric+m1&type=issues).

If feature development on `pytorch_geometric` makes use of the listed package dependencies, M1 issues have been raised.

* [`pyg-lib`](https://github.com/search?q=repo%3Apyg-team%2Fpyg-lib+m1&type=issues)
* [`pytorch scatter`](https://github.com/search?q=repo%3Arusty1s%2Fpytorch_scatter+m1&type=issues)
* [`pytorch sparse`](https://github.com/search?q=repo%3Arusty1s%2Fpytorch_sparse+m1&type=issues)
* [`pytorch cluster`](https://github.com/search?q=repo%3Arusty1s%2Fpytorch_cluster+m1&type=issues)

It's likely that the package `torch-spline-conv`, another package dependency, is also an issue for M1 users - however no issues mentioning this are given.

These dependencies are being subsumed into other packages (for example `torch.scatter`); at some point they won't be needed.

#### Why is M1 a Problem?

To develop locally, I need a an editable install version of pytorch geometric. This editable install needs additional dependencies (for fuller developer functionality such as testing, type checking, compiling, linting and documentation) some of which depend on `C++` extensions that are not compiled for the M1 architecture. The project founder (@rusty1s) has noted that M1 was not supported from the onset - when github didn't support M1, and there are no plans to support it now. Later Apple Silicon is supported.

#### The Solution

pyg team suggested earlier that M1 wanting the fuller editable version of the package can use the `cmake` & `ninja` build systems to create libraries and dependencies that target M1 - this will give a working modifiable install of pytorch geometric.

Let's see if I can do this and get a development environment setup.

What I'll do is as follows:

1. check the OS & Hardware
1. make sure to uninstall all versions of pytorch geometric for all locations.
1. create and activate a clean Python virtual environment
1. install a specific version of PyTorch using conda, as recommended by [Apple](https://developer.apple.com/metal/pytorch/)
1. build dependencies
1. build the editable install

##### OS and Hardware

```{python}
%%bash
echo "Operating System: $(uname -s)"
echo "Hardware: $(uname -m)"
echo "macOS Version: $(sw_vers -productVersion)"
echo "Chipset: $(sysctl -n machdep.cpu.brand_string)"
```


##### Editable Developer Install

```{python}
#| eval: false

%%bash
# set variables here
DIR="$HOME/Code/throwaway/pytorch-geometric-developer-install"
RECENT_TORCH_VERSION=2.2.0
YOUR_USERNAME="project-delphi"

mkdir -p "$DIR"
cd "$DIR"
python3 -m venv .venv
source .venv/bin/activate
pip install -q --upgrade pip


##### TORCH BUILD AND INSTALL ON M1, to use GPUs #####
pip install -q numpy # to remove user warning with torch install
pip install -q mpmath==1.3.0 # bugfix
xcode-select --install  > /dev/null 2>&1 # if xcode not installed

# install miniconda for apple silicon, if not already installed

if [ -d "$HOME/anaconda3" ] || [ -d "$HOME/miniconda3" ]
then
    echo "Conda is installed"
else
    curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh
    sh Miniconda3-latest-MacOSX-arm64.sh -b -u
fi
###### install pytorch ######
pip install -q --pre torch==$RECENT_TORCH_VERSION torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu


# install dependencies
pip install cmake
pip install ninja wheel
pip install -q git+https://github.com/pyg-team/pyg-lib.git
MACOSX_DEPLOYMENT_TARGET=13.1 CC=clang CXX=clang++ python -m pip --no-cache-dir  install  torch-scatter
MACOSX_DEPLOYMENT_TARGET=13.1 CC=clang CXX=clang++ python -m pip --no-cache-dir  install  torch-sparse
MACOSX_DEPLOYMENT_TARGET=13.1 CC=clang CXX=clang++ python -m pip --no-cache-dir  install  torch-cluster
MACOSX_DEPLOYMENT_TARGET=13.1 CC=clang CXX=clang++ python -m pip --no-cache-dir  install  torch-spline-conv
# clone the forked repository
git clone "https://github.com/pyg-team/pytorch_geometric.git"  2>/dev/null
cd pytorch_geometric
MACOSX_DEPLOYMENT_TARGET=13.1 CC=clang CXX=clang++ python -m pip install -q --no-cache-dir -e ".[dev,full]"
# check
python --version
python -c "import torch; print(f'torch version: {torch.__version__}')"
python -c "import torch_geometric as pyg; print(f'torch geometric version: {pyg.__version__}')"
pytest
```

 Generates the following output:

```
...
-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================================================================ short test summary info =================================================================================
FAILED test/loader/test_dataloader.py::test_dataloader_on_disk_dataset[2] - TypeError: cannot pickle 'sqlite3.Connection' object
FAILED test/test_edge_index.py::test_spspmm[directed--sum-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/test_edge_index.py::test_spspmm[directed--add-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/test_edge_index.py::test_spspmm[directed-transpose-sum-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/test_edge_index.py::test_spspmm[directed-transpose-add-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/test_edge_index.py::test_spspmm[undirected--sum-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/test_edge_index.py::test_spspmm[undirected--add-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/test_edge_index.py::test_spspmm[undirected-transpose-sum-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/test_edge_index.py::test_spspmm[undirected-transpose-add-cpu] - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/test_inspector.py::test_type_repr - AttributeError: type object 'Any' has no attribute '_name'
FAILED test/transforms/test_add_metapaths.py::test_add_metapaths - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/transforms/test_add_metapaths.py::test_add_metapaths_max_sample - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/transforms/test_add_metapaths.py::test_add_weighted_metapaths - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
FAILED test/transforms/test_two_hop.py::test_two_hop - RuntimeError: addmm: computation on CPU is not implemented for SparseCsr + SparseCsr @ SparseCsr without MKL. PyTorch built with MKL has better support for addmm with sparse CPU ten...
======================================================== 14 failed, 5416 passed, 680 skipped, 13792 warnings in 135.94s (0:02:15) ========================================================
```

Close! It's an issue with the MKL (Intel's Math Kernel Library) and Apple Silicon partial compatibility. So this problem likely persists on all Apple Silicon, and not just `M1`.

Apple has chosen to launch it's own framework called Metal Performance Shaders (`mps`) and unfortunately the `BLAS` support with that is only partial.

## Conclusion

Checking with @rusty1s, this is a problem with the type of tensors used in tests. I'm going to work on replacing COO tensors with CSR tensors for testing. A conversation with [chatGPT](https://chat.openai.com/share/999b7857-40bc-41ee-8b50-b3c10ee46283) helped to explain the differences between the two types of tensors.

Also, `MKL` is part of Intel's oneAPI project. It [seems](https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/How-to-use-mkl-on-M2-mac/m-p/1482549) that supporting apple silicon is out of scope at this time.

So, developing `pyg` on recent Apple devices may just not be possible, but running on Apple Silicon is. Well if that is true, there's always the cloud for Apple based developers who want to contribute.

## References

* [pytorch on Apple Metal](https://developer.apple.com/metal/pytorch/)

* [pyg-lib M1 issues](https://github.com/search?q=repo%3Apyg-team%2Fpyg-lib+m1&type=issues)

* [pytorch-scatter M1 issue](https://github.com/rusty1s/pytorch_scatter/issues/183)

* [pytorch-spars M1 issues](https://github.com/search?q=repo%3Arusty1s%2Fpytorch_sparse+m1&type=issues)

* [pytorch-cluster M1 issues](https://github.com/search?q=repo%3Arusty1s%2Fpytorch_cluster+m1&type=issues)
